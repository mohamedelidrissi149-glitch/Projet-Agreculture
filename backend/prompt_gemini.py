import google.generativeai as genai
import os
from flask import Blueprint, request, jsonify
from auth import token_required
 
# Configuration de la cl√© API
GOOGLE_API_KEY = 'AIzaSyDy45E9YOGHO9jZ6QOEjLScxW83enGRUcI'
genai.configure(api_key=GOOGLE_API_KEY)

# Cr√©er le blueprint pour les routes Gemini
gemini_bp = Blueprint('gemini', __name__)

def generate_agricultural_advice(form_data: dict, irrigation_prediction: str, crop_prediction: str) -> str:
    """
    G√©n√®re des conseils agricoles personnalis√©s avec Gemini LLM.
    
    Args:
        form_data (dict): Donn√©es du formulaire agricole
        irrigation_prediction (str): Pr√©diction d'irrigation (Oui/Non)
        crop_prediction (str): Culture recommand√©e
    
    Returns:
        str: Conseils agricoles g√©n√©r√©s par IA
    """
    
    # Construction du prompt contextualis√©
    prompt = f"""
Tu es un expert agronome AI. Analyse ces donn√©es agricoles et g√©n√®re des conseils pratiques en fran√ßais :

üìä DONN√âES TERRAIN :
‚Ä¢ Azote (N) : {form_data.get('Nitrogen', 'N/A')} ppm
‚Ä¢ Phosphore (P) : {form_data.get('phosphorous', 'N/A')} ppm  
‚Ä¢ Potassium (K) : {form_data.get('Potassium', 'N/A')} ppm
‚Ä¢ Temp√©rature : {form_data.get('temperature', 'N/A')}¬∞C
‚Ä¢ Humidit√© : {form_data.get('humidity', 'N/A')}%
‚Ä¢ pH du sol : {form_data.get('ph', 'N/A')}
‚Ä¢ Pluie mensuelle : {form_data.get('Rainfall_Mensuel', 'N/A')} mm
‚Ä¢ Pluie annuelle : {form_data.get('Rainfall_Annuel', 'N/A')} mm

ü§ñ PR√âDICTIONS MOD√àLE ML :
‚Ä¢ Besoin irrigation : {irrigation_prediction}
‚Ä¢ Culture recommand√©e : {crop_prediction}

üìã G√âN√àRE UN GUIDE PRATIQUE INCLUANT :

1. üíß IRRIGATION
   - Fr√©quence recommand√©e cette semaine
   - Quantit√© d'eau par session (L/m¬≤)
   - Meilleur moment de la journ√©e

2. üå± FERTILISATION  
   - Dosage NPK recommand√©
   - Noms commerciaux d'engrais adapt√©s
   - Fr√©quence d'application

3. üåæ CONSEILS CULTURE "{crop_prediction}"
   - Techniques sp√©cifiques √† cette culture
   - Surveillance des maladies
   - Optimisation du rendement

4. ‚ö†Ô∏è ALERTES & RECOMMANDATIONS
   - Points d'attention selon tes conditions
   - Actions prioritaires cette semaine

R√©ponds de mani√®re concise, pratique et directement applicable. Maximum 400 mots.
"""

    try:
        # Initialiser le mod√®le Gemini
        model = genai.GenerativeModel("gemini-1.5-flash")
        
        # G√©n√©rer la r√©ponse
        response = model.generate_content(prompt)
        
        if response and response.text:
            return response.text.strip()
        else:
            return "D√©sol√©, impossible de g√©n√©rer des conseils pour le moment. Veuillez r√©essayer."
            
    except Exception as e:
        print(f"‚ùå Erreur Gemini API: {e}")
        return f"Erreur lors de la g√©n√©ration des conseils: {str(e)}"

@gemini_bp.route('/api/gemini-advice', methods=['POST'])
@token_required
def get_gemini_advice(current_user):
    """
    Endpoint pour obtenir les conseils agricoles de Gemini
    """
    try:
        # R√©cup√©rer les donn√©es de la requ√™te
        data = request.get_json()
        
        if not data: 
            return jsonify({
                'success': False,
                'error': 'Aucune donn√©e re√ßue'
            }), 400
        
        form_data = data.get('formData', {})
        irrigation_prediction = data.get('irrigationPrediction', 'Non sp√©cifi√©e')
        crop_recommendation = data.get('cropRecommendation', 'Non sp√©cifi√©e')
        
        # Validation des donn√©es essentielles
        required_fields = ['Nitrogen', 'phosphorous', 'Potassium', 'temperature', 'humidity', 'ph']
        missing_fields = [field for field in required_fields if not form_data.get(field)]
        
        if missing_fields:
            return jsonify({
                'success': False,
                'error': f'Champs manquants: {", ".join(missing_fields)}'
            }), 400
        
        print(f"üß† G√©n√©ration conseils pour utilisateur {current_user['email']}")
        print(f"üìä Donn√©es: N={form_data.get('Nitrogen')}, P={form_data.get('phosphorous')}, K={form_data.get('Potassium')}")
        print(f"ü§ñ Pr√©dictions: Irrigation={irrigation_prediction}, Culture={crop_recommendation}")
        
        # G√©n√©rer les conseils avec Gemini
        advice = generate_agricultural_advice(form_data, irrigation_prediction, crop_recommendation)
        
        if advice and len(advice) > 10:  # V√©rifier que la r√©ponse n'est pas vide
            print("‚úÖ Conseils Gemini g√©n√©r√©s avec succ√®s")
            return jsonify({
                'success': True,
                'advice': advice,
                'user': current_user['email']
            })
        else:
            print("‚ùå R√©ponse Gemini vide ou trop courte")
            return jsonify({
                'success': False,
                'error': 'R√©ponse IA invalide ou vide'
            }), 500
            
    except Exception as e:
        print(f"üí• Erreur endpoint gemini-advice: {e}")
        return jsonify({
            'success': False,
            'error': 'Erreur serveur lors de la g√©n√©ration des conseils'
        }), 500

# Fonction de test (optionnelle)
def test_gemini_advice():
    """
    Fonction de test pour v√©rifier le bon fonctionnement
    """
    sample_data = {
        "Nitrogen": 45,
        "phosphorous": 35,
        "Potassium": 40,
        "temperature": 22,
        "humidity": 65,
        "ph": 6.8,
        "Rainfall_Mensuel": 75,
        "Rainfall_Annuel": 850
    }
        
    advice = generate_agricultural_advice(sample_data, "Oui", "tomate") 
    print("\n" + "="*50)
    print("üß™ TEST CONSEILS GEMINI")
    print("="*50)
    print(advice)
    print("="*50)   
   
if __name__ == "__main__":     
    # Tester la fonction  
    test_gemini_advice()      
       



        