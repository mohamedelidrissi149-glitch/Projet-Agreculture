# get_data_predict.py
from flask import Blueprint, jsonify, request
from db import Database
from datetime import datetime
import traceback

get_data_bp = Blueprint('get_data_bp', __name__)

def get_predictions_collection():
    """R√©cup√®re la collection predictions avec gestion d'erreur"""
    try:
        print("üîÑ Initialisation connexion Database...")
        db = Database()
        
        if db.client is None or db.db is None:
            print("‚ùå Erreur: Database non initialis√©e")
            return None
            
        collection = db.get_collection('predictions')
        if collection is None:
            print("‚ùå Erreur: Collection predictions inaccessible")
            return None
            
        print("‚úÖ Collection predictions accessible")
        return collection
    except Exception as e:
        print(f"‚ùå Erreur acc√®s collection: {e}")
        traceback.print_exc()
        return None

def serialize_doc(doc):
    """S√©rialise un document MongoDB en format JSON"""
    try:
        if not doc:
            return None
            
        # Affichage du document pour debug
        print(f"üîç S√©rialisation document: {doc.get('email_agriculteur', 'N/A')}")
        
        return {
            "email_agriculteur": doc.get("email_agriculteur", "-"),
            "nom_agriculteur": doc.get("nom_agriculteur", "-"),
            "azote": doc.get("azote_n", 0),
            "phosphore": doc.get("phosphore_p", 0),
            "potassium": doc.get("potassium_k", 0),
            "temperature_celsius": doc.get("temperature_celsius", 0),
            "humidite_pourcentage": doc.get("humidite_pourcentage", 0),
            "ph": doc.get("ph_sol", 0),
            "pluie_mensuelle_mm": doc.get("pluie_mensuelle_mm", 0),
            "pluie_annuelle_mm": doc.get("pluie_annuelle_mm", 0),
            "besoin_irrigation": doc.get("besoin_irrigation", "-"),
            "culture_recommandee": doc.get("culture_recommandee", "-"),
            "date_prediction": doc.get("date_prediction").isoformat() if doc.get("date_prediction") else datetime.now().isoformat(),
            # Champs pour suppression
            "azote_n": doc.get("azote_n", 0),
            "phosphore_p": doc.get("phosphore_p", 0),
        }
    except Exception as e:
        print(f"‚ùå Erreur s√©rialisation: {e}")
        return None

@get_data_bp.route('/predictions', methods=['GET'])
def get_predictions():
    """R√©cup√®re toutes les pr√©dictions"""
    try:
        print("üöÄ === D√âBUT GET_PREDICTIONS ===")
        
        collection = get_predictions_collection()
        if collection is None:
            print("‚ùå Collection inaccessible")
            return jsonify({
                "success": False,
                "error": "Collection predictions inaccessible",
                "data": []
            }), 500

        # V√©rification que la collection contient des donn√©es
        try:
            total_count = collection.count_documents({})
            print(f"üìä Total documents dans collection: {total_count}")
            
            if total_count == 0:
                print("‚ö†Ô∏è Aucun document dans la collection")
                return jsonify({
                    "success": True,
                    "data": [],
                    "total": 0,
                    "message": "Aucune pr√©diction trouv√©e"
                })
                
        except Exception as e:
            print(f"‚ùå Erreur count documents: {e}")
            return jsonify({
                "success": False,
                "error": f"Erreur comptage: {str(e)}",
                "data": []
            }), 500

        # R√©cup√©ration des documents
        try:
            print("üîç R√©cup√©ration des documents...")
            cursor = collection.find({}).sort("date_prediction", -1)
            docs = list(cursor)
            print(f"üìã Documents r√©cup√©r√©s: {len(docs)}")
            
            if docs:
                print(f"üîç Premier document brut: {docs[0]}")
                
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration documents: {e}")
            traceback.print_exc()
            return jsonify({
                "success": False,
                "error": f"Erreur r√©cup√©ration: {str(e)}",
                "data": []
            }), 500

        # S√©rialisation
        data = []
        for i, doc in enumerate(docs):
            try:
                serialized = serialize_doc(doc)
                if serialized:
                    data.append(serialized)
                    if i == 0:
                        print(f"‚úÖ Premier document s√©rialis√©: {serialized}")
            except Exception as e:
                print(f"‚ùå Erreur s√©rialisation doc {i}: {e}")
                continue

        response = {
            "success": True,
            "data": data,
            "total": len(data),
            "message": f"{len(data)} pr√©diction(s) r√©cup√©r√©e(s)"
        }

        print(f"‚úÖ === R√âPONSE ENVOY√âE: {len(data)} √©l√©ments ===")
        return jsonify(response)

    except Exception as e:
        print(f"‚ùå === ERREUR G√âN√âRALE GET_PREDICTIONS: {e} ===")
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": f"Erreur serveur: {str(e)}",
            "data": []
        }), 500

@get_data_bp.route('/predictions/delete', methods=['DELETE'])
def delete_prediction():
    """Supprime une pr√©diction"""
    try:
        print("üóëÔ∏è === D√âBUT DELETE_PREDICTION ===")
        
        collection = get_predictions_collection()
        if collection is None:
            return jsonify({"success": False, "error": "Collection inaccessible"}), 500

        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "Donn√©es JSON manquantes"}), 400

        print(f"üîç Donn√©es re√ßues: {data}")

        email = data.get('email_agriculteur')
        azote_n = data.get('azote_n')
        phosphore_p = data.get('phosphore_p')

        if not email or azote_n is None or phosphore_p is None:
            return jsonify({
                "success": False, 
                "error": "Tous les champs requis manquants"
            }), 400

        # Crit√®res de suppression
        query = {
            "email_agriculteur": email,
            "azote_n": float(azote_n),
            "phosphore_p": float(phosphore_p)
        }

        print(f"üîç Query suppression: {query}")

        # V√©rifier existence
        existing_doc = collection.find_one(query)
        if existing_doc:
            print(f"‚úÖ Document trouv√©: {existing_doc.get('nom_agriculteur', 'N/A')}")
        else:
            print("‚ö†Ô∏è Document non trouv√©")
            return jsonify({"success": False, "error": "Pr√©diction non trouv√©e"}), 404

        # Suppression
        result = collection.delete_one(query)
        
        if result.deleted_count > 0:
            print("‚úÖ Suppression r√©ussie")
            return jsonify({
                "success": True,
                "deleted_count": result.deleted_count,
                "message": "Pr√©diction supprim√©e"
            })
        else:
            return jsonify({"success": False, "error": "√âchec suppression"}), 500

    except Exception as e:
        print(f"‚ùå Erreur delete: {e}")
        traceback.print_exc()
        return jsonify({"success": False, "error": f"Erreur: {str(e)}"}), 500

@get_data_bp.route('/predictions/clear', methods=['DELETE'])
def clear_predictions():
    """Supprime toutes les pr√©dictions"""
    try:
        print("üóëÔ∏è === D√âBUT CLEAR_PREDICTIONS ===")
        
        collection = get_predictions_collection()
        if collection is None:
            return jsonify({"success": False, "error": "Collection inaccessible"}), 500

        # Comptage avant suppression
        count_before = collection.count_documents({})
        print(f"üìä Documents √† supprimer: {count_before}")
        
        if count_before == 0:
            return jsonify({
                "success": True,
                "deleted_count": 0,
                "message": "Aucune pr√©diction √† supprimer"
            })
        
        # Suppression
        result = collection.delete_many({})
        
        print(f"‚úÖ {result.deleted_count} pr√©dictions supprim√©es")
        return jsonify({
            "success": True,
            "deleted_count": result.deleted_count,
            "message": f"{result.deleted_count} pr√©diction(s) supprim√©e(s)"
        })

    except Exception as e:
        print(f"‚ùå Erreur clear: {e}")
        traceback.print_exc()
        return jsonify({"success": False, "error": f"Erreur: {str(e)}"}), 500

# Route de test pour ins√©rer des donn√©es factices
@get_data_bp.route('/predictions/test-insert', methods=['POST'])
def test_insert():
    """Ins√®re des donn√©es de test"""
    try:
        collection = get_predictions_collection()
        if collection is None:
            return jsonify({"success": False, "error": "Collection inaccessible"}), 500

        test_data = {
            'email_agriculteur': 'sophie.durand@example.com',
            'nom_agriculteur': 'Sophie Durand',
            'azote_n': 55,
            'phosphore_p': 45,
            'potassium_k': 40,
            'temperature_celsius': 20.8,
            'humidite_pourcentage': 60,
            'ph_sol': 7,
            'pluie_mensuelle_mm': 80,
            'pluie_annuelle_mm': 800,
            'besoin_irrigation': 'Oui, irrigation importante',
            'culture_recommandee': 'apple',
            'date_prediction': datetime.utcnow(),
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow()
        }

        result = collection.insert_one(test_data)
        
        if result.inserted_id:
            return jsonify({
                "success": True,
                "message": "Donn√©es test ins√©r√©es",
                "inserted_id": str(result.inserted_id)
            })
        else:
            return jsonify({"success": False, "error": "√âchec insertion"})

    except Exception as e:
        print(f"‚ùå Erreur test-insert: {e}")
        return jsonify({"success": False, "error": str(e)}), 500 